// Constant

#define PI      3.1415926f
#define PI2     6.2831853f
#define _255    0.0039215f




// OBS Params

uniform float4x4 ViewProj<
    bool automatic = true;
    string name = "View Projection Matrix";
>;

uniform float4 Time<
    bool automatic = true;
>;




// StreamFX Params

uniform texture2d InputA<
    bool automatic = true;
>;

uniform float _0_freq<
    string name = "Frequency (Hz)";
    string field_type = "slider";
    float minimum = 0.1;
    float maximum = 30.;
    float step = 0.01;
    float scale = 1.;
> = 1.;

uniform float _1_duty<
    string name = "Duty Cycle";
    string field_type = "slider";
    float minimum = 0.;
    float maximum = 1.;
    float step = 0.01;
    float scale = 1.;
> = .5;




// Shader

sampler_state linear_sampler {
    AddressU  = Clamp;
    AddressV  = Clamp;
    Filter    = Linear;
};

struct VertData {
    float4 pos : POSITION;
    float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) {
    VertData vert_out;
    vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
    vert_out.uv  = v_in.uv;
    return vert_out;
}

float4 PSDefault(VertData v_in) : TARGET {
    float4 x = InputA.Sample(linear_sampler, v_in.uv);
    float t = 1. / _0_freq;
    x.a *= fmod(Time.x, t) < (t * _1_duty);
    return x;
}

technique Draw
{
    pass
    {
        vertex_shader = VSDefault(v_in);
        pixel_shader  = PSDefault(v_in);
    }
}
