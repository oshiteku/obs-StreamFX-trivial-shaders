// OBS Params

uniform float4x4 ViewProj<
    bool automatic = true;
    string name = "View Projection Matrix";
>;

uniform float4 ViewSize<
    bool automatic = true;
>;




// StreamFX Params

uniform texture2d InputA<
    bool automatic = true;
>;

uniform float _0_radius<
    string name = "Radius";
    string field_type = "slider";
    float minimum = 0.;
    float maximum = .5;
    float step = 0.001;
    float scale = 1.;
> = 0.;




// Shader

sampler_state linear_sampler {
    AddressU  = Clamp;
    AddressV  = Clamp;
    Filter    = Linear;
};

struct VertData {
    float4 pos : POSITION;
    float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) {
    VertData vert_out;
    vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
    vert_out.uv  = v_in.uv;
    return vert_out;
}

float4 PSDefault(VertData v_in) : TARGET {
    float4 c = InputA.Sample(linear_sampler, v_in.uv);
    float2 xy = ViewSize.xy * v_in.uv;
    float r = min(ViewSize.x, ViewSize.y) * _0_radius;
    float2 h = ViewSize.xy * .5;
    float a = length(max(abs(xy - h) - h + r, .0)) - r;
    return float4(c.rgb, c.a * smoothstep(1., 0., a));
}

technique Draw
{
    pass
    {
        vertex_shader = VSDefault(v_in);
        pixel_shader  = PSDefault(v_in);
    }
}
